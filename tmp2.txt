import { timeDateToString } from "@/lib/time";
import type { Availability, Employee, ShiftTemplate, Weekday } from "@/generated/prisma";

export const dayOrder: Weekday[] = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];

export type EmployeePayload = {
  name: string;
  email: string;
  phone: string;
  label: string;
  color: string;
  canWorkAcrossStores: boolean;
  availability: Array<{
    day: Weekday;
    isOff: boolean;
    startTime: string;
    endTime: string;
  }>;
};

export type ShiftTemplatePayload = {
  role: string;
  days: Record<Weekday, boolean>;
  startTime: string;
  endTime: string;
};

export function serializeEmployees(
  employees: Array<Employee & { availability: Availability[] }>,
): EmployeePayload[] {
  return employees.map((employee) => {\n    const id = (employee as any).id;\n    const availabilityMap = new Map(employee.availability.map((slot) => [slot.day, slot]));

    return {\n      id: id as string,\n      name: employee.name,
      email: employee.email ?? "",
      phone: employee.phone ?? "",
      label: employee.label,
      color: employee.color,
      canWorkAcrossStores: employee.canWorkAcrossStores,
      availability: dayOrder.map((day) => {
        const slot = availabilityMap.get(day);
        return {
          day,
          isOff: slot?.isOff ?? true,
          startTime: timeDateToString(slot?.startTime),
          endTime: timeDateToString(slot?.endTime),
        };
      }),
    } satisfies EmployeePayload;
  });
}

export function serializeShiftTemplates(templates: ShiftTemplate[]): ShiftTemplatePayload[] {
  return templates.map((template) => {
    const rawDays = (template.days ?? {}) as Record<string, boolean>;

    const days = dayOrder.reduce<Record<Weekday, boolean>>((acc, day) => {
      acc[day] = Boolean(rawDays?.[day]);
      return acc;
    }, {} as Record<Weekday, boolean>);

    return {
      role: template.role,
      days,
      startTime: timeDateToString(template.startTime),
      endTime: timeDateToString(template.endTime),
    } satisfies ShiftTemplatePayload;
  });
}

