generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  clerkId        String         @unique
  email          String?        @unique
  role           UserRole       @default(BIG_MANAGER)
  onboardingStep OnboardingStep @default(STORE)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  stores         Store[]
}

model Store {
  id             String          @id @default(cuid())
  name           String
  country        String          @default("BE")
  city           String
  address        String?
  managerId      String
  openingTime    DateTime?       @db.Time(0)
  closingTime    DateTime?       @db.Time(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  employees      Employee[]
  schedules      Schedule[]
  shiftTemplates ShiftTemplate[]
  manager        User            @relation(fields: [managerId], references: [id])
  workTypes      WorkType[]

  @@unique([managerId, name])
}

model Employee {
  id                  String             @id @default(cuid())
  storeId             String
  name                String
  email               String?
  phone               String?
  color               String
  canWorkAcrossStores Boolean            @default(false)
  contractType        ContractType       @default(FULL_TIME)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  weeklyMinutesTarget Int                @default(2400)
  assignments         Assignment[]
  availability        Availability[]
  availabilityTokens  AvailabilityToken[]
  store               Store              @relation(fields: [storeId], references: [id])
  roles               EmployeeWorkType[]

  @@unique([storeId, email])
}

model Availability {
  id         String    @id @default(cuid())
  employeeId String
  day        Weekday
  isOff      Boolean   @default(false)
  startTime  DateTime? @db.Time(0)
  endTime    DateTime? @db.Time(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, day])
}

model AvailabilityToken {
  id         String   @id @default(cuid())
  token      String   @unique
  employeeId String
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([employeeId])
}

model ShiftTemplate {
  id          String       @id @default(cuid())
  storeId     String
  workTypeId  String
  days        Json
  startTime   DateTime     @db.Time(0)
  endTime     DateTime     @db.Time(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assignments Assignment[]
  store       Store        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  workType    WorkType     @relation(fields: [workTypeId], references: [id])
}

model Schedule {
  id          String        @id @default(cuid())
  storeId     String
  isoWeek     String
  state       ScheduleState @default(Draft)
  version     Int           @default(1)
  generatedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assignments Assignment[]
  store       Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, isoWeek])
}

model Assignment {
  id               String         @id @default(cuid())
  scheduleId       String
  day              Weekday
  startTime        DateTime       @db.Time(0)
  endTime          DateTime       @db.Time(0)
  workTypeId       String
  employeeId       String?
  sourceTemplateId String?
  locked           Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  employee         Employee?      @relation(fields: [employeeId], references: [id])
  schedule         Schedule       @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  sourceTemplate   ShiftTemplate? @relation(fields: [sourceTemplateId], references: [id])
  workType         WorkType       @relation(fields: [workTypeId], references: [id])

  @@index([scheduleId, day, startTime])
}

model WorkType {
  id          String             @id @default(cuid())
  storeId     String
  name        String
  color       String?            @default("#0f172a")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  employees   EmployeeWorkType[]
  shifts      ShiftTemplate[]
  assignments Assignment[]
  store       Store              @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, name])
}

model EmployeeWorkType {
  employeeId String
  workTypeId String
  assignedAt DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  workType   WorkType @relation(fields: [workTypeId], references: [id], onDelete: Cascade)

  @@id([employeeId, workTypeId])
}

enum UserRole {
  BIG_MANAGER
}

enum ContractType {
  FULL_TIME
  PART_TIME
  STUDENT
  FLEXI_JOB
}

enum OnboardingStep {
  STORE
  EMPLOYEES
  SHIFTS
  DONE
}

enum Weekday {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum ScheduleState {
  Draft
  Published
}

enum AdvisorScope {
  HomeOnly
  AllManaged
  Specific
}

model ChatThread {
  threadId       String        @id @map("thread_id")
  userId         String        @map("user_id")
  storeId        String?       @map("store_id")
  weekId         String?       @map("week_id")
  rollingSummary String?       @map("rolling_summary")
  recentMessages Json?         @map("recent_messages")
  updatedAt      DateTime      @default(now()) @map("updated_at")
  messages       ChatMessage[]

  @@map("chat_threads")
  @@index([userId, storeId, weekId], map: "chat_threads_scoped_idx")
}

model ChatMessage {
  id        String    @id @default(uuid())
  threadId  String    @map("thread_id")
  userId    String    @map("user_id")
  storeId   String?   @map("store_id")
  weekId    String?   @map("week_id")
  role      String
  content   String
  timestamp DateTime
  thread    ChatThread @relation(fields: [threadId], references: [threadId], onDelete: Cascade)

  @@map("chat_messages")
  @@index([threadId, timestamp], map: "chat_messages_thread_ts_idx")
}

model AdvisorThread {
  id        String        @id @default(cuid())
  userId    String
  storeId   String?
  isoWeek   String?
  scope     AdvisorScope  @default(HomeOnly)
  extraStoreIds Json?
  context Json? @db.JsonB @default("{}")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  messages  AdvisorMessage[]

  @@index([userId, storeId, isoWeek])
}

model AdvisorMessage {
  id        String   @id @default(cuid())
  threadId  String
  role      String
  content   Json
  createdAt DateTime @default(now())
  thread    AdvisorThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
}
